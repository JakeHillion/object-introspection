[info]
typeName = "std::pair<"
numTemplateParams = 2
ctype = "PAIR_TYPE"
header = "utility"
ns = ["namespace std"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template <typename DB, typename T0, typename T1>
struct TypeHandler<DB, %1%<T0, T1>> {
  using type = StaticTypes::Pair<DB,
      typename TypeHandler<DB, T0>::type,
      typename TypeHandler<DB, T1>::type>;

  static StaticTypes::Unit<DB> getSizeType(
      const %1%<T0, T1> & container,
      typename TypeHandler<DB, %1%<T0, T1>>::type returnArg) {
    return OIInternal::getSizeType<DB>(
        container.second,
        returnArg.delegate([&container](auto ret) {
            return OIInternal::getSizeType<DB>(container.first, ret);
        })
    );
  }
};
"""

func = """
// DummyFunc %1%
"""
