[info]
typeName = "std::__cxx11::basic_string<"
numTemplateParams = 1
ctype = "STRING_TYPE"
header = "string"
ns = ["namespace std"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template <typename DB, typename T0>
struct TypeHandler<DB, %1% <T0>> {
  using type =
      StaticTypes::Pair<DB, StaticTypes::VarInt<DB>, StaticTypes::VarInt<DB>>;

  static StaticTypes::Unit<DB> getSizeType(
      const %1% <T0> & container,
      typename TypeHandler<DB, %1% <T0>>::type returnArg) {
    bool sso = ((uintptr_t)container.data() <
                (uintptr_t)(&container + sizeof(%1% <T0>))) &&
               ((uintptr_t)container.data() >= (uintptr_t)&container);

    return returnArg.write(container.capacity()).write(container.size());
  }
};
"""

func = """
// DummyFunc %1%
"""
