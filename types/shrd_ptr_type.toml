[info]
typeName = "std::shared_ptr"
numTemplateParams = 1
ctype = "SHRD_PTR_TYPE"
header = "memory"
ns = ["namespace std"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template <typename DB, typename T0>
struct TypeHandler<DB, %1%<T0>> {
    using type = typename std::conditional<
      std::is_void<T0>::value,
      StaticTypes::Unit<DB>,
      StaticTypes::Pair<DB,
        StaticTypes::VarInt<DB>,
        StaticTypes::Sum<DB,
          StaticTypes::Unit<DB>,
          typename TypeHandler<DB, T0>::type
      >>>::type;

    static StaticTypes::Unit<DB> getSizeType(
        const %1%<T0>& container,
        typename TypeHandler<DB, %1%<T0>>::type returnArg) {
      if constexpr (!std::is_void<T0>::value) {
        auto r0 = returnArg.write((uintptr_t)(container.get()));
        if (container && pointers.add((uintptr_t)(container.get()))) {
          return r0.template delegate<1>([&container](auto ret) {
            return OIInternal::getSizeType<DB>(*(container.get()), ret);
          });
        } else {
          return r0.template delegate<0>(std::identity());
        }
      } else {
        return returnArg;
      }
    }
};
"""

func = """
// DummyFunc %1%
"""
