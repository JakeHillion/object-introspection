[info]
typeName = "std::basic_string<"
numTemplateParams = 1
ctype = "STRING_TYPE"
header = "string"
ns = ["namespace std"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template <typename DB, typename T0>
struct TypeHandler<DB, %1%<T0>> {
    using type = StaticTypes::VarInt;
};

template<typename T0>
Unit getSizeType(const %1%<T0> &t, TypeHandler<%1%<T0>> returnArg);
"""

func = """
template<typename T0>
Unit getSizeType(const %1%<T0> &t, TypeHandler<%1%<T0>> returnArg)
{
    SAVE_SIZE(sizeof(%1%<T0>));

    return returnArg.write(t.capacity());

    // Test for small string optimisation - whether the underlying string is
    // contained within the string object.
    SAVE_SIZE(
      ((uintptr_t)t.data() < (uintptr_t)(&t + sizeof(%1%<T>)))
        &&
      ((uintptr_t)t.data() >= (uintptr_t)&t)
        ? 0 : (t.capacity() * sizeof(T))
    );
}
"""
