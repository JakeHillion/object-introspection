[info]
typeName = "std::priority_queue<"
# numTemplateParams = 1
ctype = "CONTAINER_ADAPTER_TYPE"
header = "queue"
ns = ["namespace std"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
underlyingContainerIndex = 1

[codegen]
decl = """
template <typename DB, typename T0, typename T1>
struct TypeHandler<DB, %1%<T0, T1>> {
  using type = StaticTypes::Pair<DB,
      StaticTypes::VarInt<DB>,
      typename TypeHandler<DB, T1>::type>;

  static StaticTypes::Unit<DB> getSizeType(
      const %1% <T0, T1> & container,
      typename TypeHandler<DB, %1% <T0, T1>>::type returnArg) {
    auto tail = returnArg.write((uintptr_t)&container);

    const T1 &underlyingContainer = get_container(container);
    return OIInternal::getSizeType<DB>(underlyingContainer, tail);
  }
};
"""

func = """
// DummyFunc %1%
"""
