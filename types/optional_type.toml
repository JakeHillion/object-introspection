[info]
typeName = "std::optional<"
numTemplateParams = 1
ctype = "OPTIONAL_TYPE"
header = "optional"
ns = ["namespace std"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template <typename DB, typename T0>
struct TypeHandler<DB, %1%<T0>> {
    using type = StaticTypes::Sum<DB,
      StaticTypes::Unit<DB>,
      typename TypeHandler<DB, T0>::type
    >;

    static StaticTypes::Unit<DB> getSizeType(
        const %1%<T0>& container,
        typename TypeHandler<DB, %1%<T0>>::type returnArg) {
      if (container) {
        return returnArg.template delegate<1>([&container](auto ret) {
          return OIInternal::getSizeType<DB>(*container, ret);
        });
      } else {
        return returnArg.template delegate<0>(std::identity());
      }
    }
};
"""

func = """
// DummyFunc %1%
"""
