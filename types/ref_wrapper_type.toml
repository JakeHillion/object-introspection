[info]
typeName = "std::reference_wrapper<"
numTemplateParams = 1
ctype = "REF_WRAPPER_TYPE"
header = "functional"
ns = ["namespace std"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template <typename DB, typename T0>
struct TypeHandler<DB, %1%<T0>> {
    using type = StaticTypes::Pair<DB,
      StaticTypes::VarInt<DB>,
      typename TypeHandler<DB, T0>::type
    >;

    static StaticTypes::Unit<DB> getSizeType(
        const %1%<T0>& container,
        typename TypeHandler<DB, %1%<T0>>::type returnArg) {
      auto r0 = returnArg.write((uintptr_t)&(container.get()));
      return OIInternal::getSizeType<DB>(container.get(), r0);
    }
};
"""

func = """
// DummyFunc %1%
"""
