[info]
typeName = "std::array<"
numTemplateParams = 1
ctype = "ARRAY_TYPE"
header = "array"
ns = ["namespace std"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template<typename DB, typename T0, long unsigned int N>
struct TypeHandler<DB, %1%<T0, N>> {
  using type = StaticTypes::List<DB, typename TypeHandler<DB, T0>::type>;

  static StaticTypes::Unit<DB> getSizeType(
      const %1%<T0, N> &container,
      typename TypeHandler<DB, %1%<T0,N>>::type returnArg) {
    auto tail = returnArg.write(container.size());

    for (auto & it: container) {
        tail = tail.delegate([&it](auto ret) {
            return TypeHandler<DB, T0>::getSizeType(it, ret);
        });
    }

    return tail.finish();
  }
};
"""

func = """
// DummyFunc %1%
"""
