[info]
typeName = "std::list<"
numTemplateParams = 1
ctype = "LIST_TYPE"
header = "list"
ns = ["namespace std"]
replaceTemplateParamIndex = []
allocatorIndex = 1
# underlyingContainerIndex = 0

[codegen]
decl = """
template <typename DB, typename T0, typename T1>
struct TypeHandler<DB, %1% <T0, T1>> {
  using type = StaticTypes::Pair<DB,
        StaticTypes::VarInt<DB>,
        StaticTypes::List<DB, typename TypeHandler<DB, T0>::type>>;

  static StaticTypes::Unit<DB> getSizeType(
      const %1% <T0, T1> & container,
      typename TypeHandler<DB, %1% <T0, T1>>::type returnArg) {
    auto tail = returnArg.write((uintptr_t)&container)
                    .write(container.size());

    // The double ampersand is needed otherwise this loop doesn't work with
    // vector<bool>
    for (auto&& it : container) {
      tail = tail.delegate([&it](auto ret) {
        return OIInternal::getSizeType<DB>(it, ret);
      });
    }

    return tail.finish();
  }
};
"""

func = """
// DummyFunc %1%
"""
